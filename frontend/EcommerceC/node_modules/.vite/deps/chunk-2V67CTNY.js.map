{
  "version": 3,
  "sources": ["../../ldrs/temp-ts-out/lib/LdrsBaseElement.js", "../../ldrs/temp-ts-out/elements/bouncy.js"],
  "sourcesContent": ["export default class LdrsBaseElement extends HTMLElement {\n    _propsToUpgrade = {};\n    shadow;\n    template;\n    defaultProps;\n    isAttached = false;\n    constructor() {\n        super();\n        this.shadow = this.attachShadow({ mode: 'open' });\n        this.template = document.createElement('template');\n    }\n    storePropsToUpgrade(props) {\n        props.forEach((prop) => {\n            if (this.hasOwnProperty(prop) && typeof this[prop] !== 'undefined') {\n                this._propsToUpgrade[prop] = this[prop];\n                delete this[prop];\n            }\n        });\n    }\n    upgradeStoredProps() {\n        Object.entries(this._propsToUpgrade).forEach(([key, val]) => {\n            this.setAttribute(key, val);\n        });\n    }\n    reflect(props) {\n        props.forEach((prop) => {\n            Object.defineProperty(this, prop, {\n                set(val) {\n                    if ('string,number'.includes(typeof val)) {\n                        this.setAttribute(prop, val.toString());\n                    }\n                    else {\n                        this.removeAttribute(prop);\n                    }\n                },\n                get() {\n                    return this.getAttribute(prop);\n                },\n            });\n        });\n    }\n    applyDefaultProps(props) {\n        this.defaultProps = props;\n        Object.entries(props).forEach(([key, defaultValue]) => {\n            this[key] = this[key] || defaultValue.toString();\n        });\n    }\n}\n", "import Base from '../lib/LdrsBaseElement.js';\nimport styles from './bouncy.scss';\nclass Bouncy extends Base {\n    _attributes = ['size', 'color', 'speed'];\n    size;\n    color;\n    speed;\n    static get observedAttributes() {\n        return ['size', 'color', 'speed'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 45,\n            color: 'black',\n            speed: 1.75,\n        });\n        this.template.innerHTML = `\n      <div class=\"container\">\n        <div class=\"cube\"><div class=\"cube__inner\"></div></div>\n        <div class=\"cube\"><div class=\"cube__inner\"></div></div>\n        <div class=\"cube\"><div class=\"cube__inner\"></div></div>\n      </div>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        if (!styleEl)\n            return;\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${this.size}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-bouncy') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Bouncy {\n            });\n        }\n    },\n    element: Bouncy,\n};\n"],
  "mappings": ";;;;;AAAe,IAAMA,IAAN,cAA8BC,YAAAA;EAMzCC,cAAAA;AACIC,UAAAA;AANJC,2CAAkB,CAAA;AAClBC;AACAC;AACAC;AACAC,sCAAAA;AAGIC,SAAKJ,SAASI,KAAKC,aAAa,EAAEC,MAAM,OAAA,CAAA,GACxCF,KAAKH,WAAWM,SAASC,cAAc,UAAA;EAC1C;EACDC,oBAAoBC,IAAAA;AAChBA,IAAAA,GAAMC,QAASC,CAAAA,OAAAA;AACPR,WAAKS,eAAeD,EAAAA,KAAAA,WAAgBR,KAAKQ,EAAAA,MACzCR,KAAKL,gBAAgBa,EAAAA,IAAQR,KAAKQ,EAAAA,GAAAA,OAC3BR,KAAKQ,EAAAA;IACf,CAAA;EAER;EACDE,qBAAAA;AACIC,WAAOC,QAAQZ,KAAKL,eAAAA,EAAiBY,QAAQ,CAAA,CAAEM,IAAKC,CAAAA,MAAAA;AAChDd,WAAKe,aAAaF,IAAKC,CAAAA;IAAI,CAAA;EAElC;EACDE,QAAQV,IAAAA;AACJA,IAAAA,GAAMC,QAASC,CAAAA,OAAAA;AACXG,aAAOM,eAAejB,MAAMQ,IAAM,EAC9BU,IAAIJ,GAAAA;AACI,wBAAgBK,SAAAA,OAAgBL,CAAAA,IAChCd,KAAKe,aAAaP,IAAMM,EAAIM,SAAAA,CAAAA,IAG5BpB,KAAKqB,gBAAgBb,EAAAA;MAE5B,GACDc,MAAAA;AACI,eAAOtB,KAAKuB,aAAaf,EAAAA;MAC5B,EAAA,CAAA;IACH,CAAA;EAET;EACDgB,kBAAkBlB,IAAAA;AACdN,SAAKF,eAAeQ,IACpBK,OAAOC,QAAQN,EAAAA,EAAOC,QAAQ,CAAA,CAAEM,IAAKY,CAAAA,MAAAA;AACjCzB,WAAKa,EAAAA,IAAOb,KAAKa,EAAAA,KAAQY,EAAaL,SAAAA;IAAU,CAAA;EAEvD;AAAA;;;;AC5CL,IAAMM,KAAN,cAAqBC,EAAAA;EAQjBC,cAAAA;AACIC,UAAAA;AARJC,uCAAc,CAAC,QAAQ,SAAS,OAAA;AAChCC;AACAC;AACAC;AAMIC,SAAKC,oBAAoBD,KAAKJ,WAAAA,GAC9BI,KAAKE,QAAQF,KAAKJ,WAAAA;EACrB;EAPUO,WAAAA,qBAAAA;AACP,WAAO,CAAC,QAAQ,SAAS,OAAA;EAC5B;EAMDC,oBAAAA;AACIJ,SAAKK,mBAAAA,GACLL,KAAKM,kBAAkB,EACnBT,MAAM,IACNC,OAAO,SACPC,OAAO,KAAA,CAAA,GAEXC,KAAKO,SAASC,YAAY;;;;;;;;wBAQVR,KAAKH,IAAAA;yBACJG,KAAKF,KAAAA;yBACLE,KAAKD,KAAAA;;UAEpBU,CAAAA;;OAGFT,KAAKU,OAAOC,gBAAgBX,KAAKO,SAASK,QAAQC,UAAAA,IAAU,CAAA;EAC/D;EACDC,2BAAAA;AACI,UAAMC,IAAUf,KAAKU,OAAOM,cAAc,OAAA;AACrCD,UAELA,EAAQP,YAAY;;sBAENR,KAAKH,IAAAA;uBACJG,KAAKF,KAAAA;uBACLE,KAAKD,KAAAA;;QAEpBU,CAAAA;;EAEH;AAAA;AAEL,IAAeQ,IAAA,EACXC,UAAU,CAACC,IAAO,eAAA;AACTC,iBAAeC,IAAIF,CAAAA,KACpBC,eAAeE,OAAOH,GAAM,cAAc3B,GAAAA;EAAAA,CAAAA;AAE7C,GAEL+B,SAAS/B,GAAAA;",
  "names": ["LdrsBaseElement", "HTMLElement", "constructor", "super", "_propsToUpgrade", "shadow", "template", "defaultProps", "isAttached", "this", "attachShadow", "mode", "document", "createElement", "storePropsToUpgrade", "props", "forEach", "prop", "hasOwnProperty", "upgradeStoredProps", "Object", "entries", "key", "val", "setAttribute", "reflect", "defineProperty", "set", "includes", "toString", "removeAttribute", "get", "getAttribute", "applyDefaultProps", "defaultValue", "Bouncy", "Base", "constructor", "super", "_attributes", "size", "color", "speed", "this", "storePropsToUpgrade", "reflect", "observedAttributes", "connectedCallback", "upgradeStoredProps", "applyDefaultProps", "template", "innerHTML", "styles", "shadow", "replaceChildren", "content", "cloneNode", "attributeChangedCallback", "styleEl", "querySelector", "bouncy", "register", "name", "customElements", "get", "define", "element"]
}
